var {{ .Name }} = `{{ .Query }}`

{{ .Payload }}

type response{{ .Name }} struct {
	Data *{{ .Name }}Payload `json:"data"`
	Errors []gqlerror.Error `json:errors`
}

func (c *Client) {{ .Name }}(
    {{- if .HasInput}}{{range $index, $element := .Arguments}}{{if $index}},{{end}}{{ .Name }} {{ .Type }}{{end}}{{ end -}}
) (*{{ .Name }}Payload, error) {  
   	requestBody, err := json.Marshal(request{
		Query: {{ .Name }},
		{{- if .HasInput }} 
		Variables: map[string]interface{}{
			{{- range $index, $element := .Arguments}}
			"{{ .Name }}": {{ .Name }},
			{{- end }}
		},
    	{{- end }}
	})

	if err != nil {
		return nil, err
	}

	resp, err := c.Post(c.Url, "application/json", bytes.NewBuffer(requestBody))  

	if err != nil {
		return nil, err
	}   

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)

	if err != nil {
		return nil, err
	}

	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("Request Failed with status code: %d, body: %v", resp.StatusCode, body)
	}

	var payload response{{ .Name }}
	err = json.Unmarshal(body, &payload)

	if err != nil {
		return nil, err
	}

	if len(payload.Errors) > 0 {
		return nil, &GraphqlError{Errors: payload.Errors}
	}

	return payload.Data, nil
}
