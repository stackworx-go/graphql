// Code generated by github.com/stackworx-go/gqlgen-relay, DO NOT EDIT.
package integration

import (
	"fmt"
    "bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/vektah/gqlparser/v2/gqlerror"
)

type Client struct {
	http.Client
	Url string
}

type request struct {
	Query         string                 `json:"query"`
	// OperationName string                 `json:"operationName"`
	Variables     interface{} `json:"variables"`
	Extensions    map[string]interface{} `json:"extensions"`
}

type GraphqlError struct {
	Errors []gqlerror.Error
}

func (e *GraphqlError) Error() string {
	return "Graphql Request Failed"
}

var TodosQuery = `query TodosQuery {
	todos {
		id
		text
		done
		user {
			id
			name
		}
	}
}
`



type TodosQueryPayload struct {
  Todos []struct {
    Id string `json:"id"`
    Text string `json:"text"`
    Done bool `json:"done"`
    User struct {
      Id string `json:"id"`
      Name string `json:"name"`
    }
  }
}

type responseTodosQuery struct {
	Data *TodosQueryPayload `json:"data"`
	Errors []gqlerror.Error `json:errors`
}

func (c *Client) TodosQuery() (*TodosQueryPayload, error) {  
   	requestBody, err := json.Marshal(request{
		Query: TodosQuery,
	})

	if err != nil {
		return nil, err
	}

	resp, err := c.Post(c.Url, "application/json", bytes.NewBuffer(requestBody))  

	if err != nil {
		return nil, err
	}   

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)

	if err != nil {
		return nil, err
	}

	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("Request Failed with status code: %d, body: %v", resp.StatusCode, body)
	}

	var payload responseTodosQuery
	err = json.Unmarshal(body, &payload)

	if err != nil {
		return nil, err
	}

	if len(payload.Errors) > 0 {
		return nil, &GraphqlError{Errors: payload.Errors}
	}

	return payload.Data, nil
}

var TodosQueryWithVariables = `query TodosQueryWithVariables ($userId: ID!) {
	todos(userId: $userId) {
		id
		text
		done
		user {
			id
			name
		}
	}
}
`


type TodosQueryWithVariablesInput struct {
  UserId string `json:"userId"`
}


type TodosQueryWithVariablesPayload struct {
  Todos []struct {
    Id string `json:"id"`
    Text string `json:"text"`
    Done bool `json:"done"`
    User struct {
      Id string `json:"id"`
      Name string `json:"name"`
    }
  }
}

type responseTodosQueryWithVariables struct {
	Data *TodosQueryWithVariablesPayload `json:"data"`
	Errors []gqlerror.Error `json:errors`
}

func (c *Client) TodosQueryWithVariables(input TodosQueryWithVariablesInput) (*TodosQueryWithVariablesPayload, error) {  
   	requestBody, err := json.Marshal(request{
		Query: TodosQueryWithVariables, 
		Variables: input,
    	
	})

	if err != nil {
		return nil, err
	}

	resp, err := c.Post(c.Url, "application/json", bytes.NewBuffer(requestBody))  

	if err != nil {
		return nil, err
	}   

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)

	if err != nil {
		return nil, err
	}

	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("Request Failed with status code: %d, body: %v", resp.StatusCode, body)
	}

	var payload responseTodosQueryWithVariables
	err = json.Unmarshal(body, &payload)

	if err != nil {
		return nil, err
	}

	if len(payload.Errors) > 0 {
		return nil, &GraphqlError{Errors: payload.Errors}
	}

	return payload.Data, nil
}

