// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/client.tmpl
// template/request.tmpl
// template/struct.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x73\xdb\x36\x13\x3e\x13\xbf\x62\x5f\x1e\x32\xa4\xc3\x40\x79\x7b\xb4\xab\x4b\xec\x38\x75\x9a\x58\xa9\xed\xa4\x07\x8f\x26\x81\xc8\xa5\x84\x8a\x04\x68\x10\x94\xac\xd1\xe8\xbf\x77\x16\x20\x29\xca\x1f\x69\xac\x83\x48\x02\xfb\xf9\xec\xee\x03\x8c\x46\x70\xaa\x33\x84\x39\x2a\x34\xc2\x62\x06\xb3\x0d\xcc\xa5\x5d\x34\x33\x9e\xea\x72\x54\x5b\x91\x2e\xd7\xda\xdc\xbf\x99\xeb\xd1\xdc\x88\x6a\x71\x57\x24\x70\x36\x81\xcb\xc9\x0d\xbc\x3f\xbb\xb8\xe1\xac\x12\xe9\x52\xcc\x11\xb6\x5b\xe0\x5f\xfc\xfb\xa5\x28\x11\x76\x3b\xc6\x64\x59\x69\x63\x21\x62\x41\x38\xdb\x58\xac\x43\x16\x84\xa8\x52\x9d\x49\x35\x1f\xfd\x53\x6b\x45\x0b\x79\x69\xe9\x21\xb5\xff\x1f\x49\xdd\x58\x59\xd0\x47\x29\x4b\x1c\x95\x4d\x61\x65\x25\x8c\x13\x52\x68\x47\x0b\x6b\x2b\x7a\x37\x98\x17\x98\xba\xe5\xda\x9a\x54\xab\x55\xfb\x2a\xd5\xbc\x0e\x19\x0b\xc2\x41\x22\x2b\x5c\x5a\xb1\x18\xcd\xef\x8a\x4a\x98\x1a\xcd\x68\xf5\x1b\x7d\xa0\x31\xda\x84\x2c\x66\xcc\x6e\x2a\x84\xd3\x42\xa2\xb2\x50\x5b\xd3\xa4\x16\xb6\x2c\x20\x5f\xdc\xaf\xb2\xe0\xeb\xd5\x27\xf0\xe6\xd9\xae\x55\x30\x78\xd7\x60\x3d\xd4\xf8\xab\x41\xb3\x81\xee\xe7\xc5\xe1\xe1\xef\x07\xe5\x7e\x1c\xde\x91\x6c\xf8\x83\x05\xa3\x11\x4c\x2a\x2a\x80\xd4\xca\x81\xf7\x73\x3d\x3d\x94\x25\xfd\x6f\xc2\x48\x31\x2b\xb0\x76\x52\x52\x59\x34\xb9\x48\x71\xbb\xeb\x34\x56\x9d\x00\x49\xbf\xbf\xb7\xa8\x6a\xa9\x95\x13\x2f\x45\x75\xeb\xdd\x4d\x9f\x50\xc4\x5e\x36\xfc\xd1\x67\x4d\xa5\xbe\x4e\x45\x21\xcc\xb9\x2c\xf0\x6b\x55\x68\x91\xc1\x6e\x37\x40\x81\xd6\xbb\xa0\xa5\xe6\x57\x28\x32\x34\x7e\x59\x51\x7e\x3d\x34\x2c\x38\xd5\xca\xa2\xb2\x37\x64\x78\x8f\x6e\xde\xa8\x14\xa2\x06\x8e\x9e\xf1\x15\xc3\x67\x61\xea\x85\x28\x3e\x5e\x4f\x2e\xa3\x18\xa2\xdb\x29\x75\x58\x02\xae\xa2\x31\xc5\x60\xd0\x36\x46\x01\xe5\xc1\x5b\xe1\x48\xc9\x22\xee\xd3\xb8\xf2\xc5\x9b\x54\xb6\x1e\x84\xfe\x87\x8b\x15\x5c\xe5\xfd\x7b\xaf\x40\x7f\xaa\x2d\x4f\x2b\x7d\x33\x58\xa2\x8a\xb5\xb0\x7d\xff\xde\xc9\x0e\x60\xfb\xe0\xe7\xe7\x3d\x45\x38\x30\xe1\xbe\x6b\xb8\x9d\x76\xfd\xc8\xdd\xca\x1e\x05\x84\xa3\xa1\x6a\x0c\xee\x11\xc5\x9d\xcf\x7d\xae\x61\x2b\xd7\xa5\x06\xe7\x42\x16\x98\x85\x64\x6b\xbb\x05\x23\xd4\x1c\x81\x5f\xa8\xaa\xb1\xd7\xce\x7f\x4d\x63\x1a\x6c\xb7\x16\xcb\xaa\x10\x16\x21\xf4\x71\x85\xc0\x69\x67\xbb\x05\x54\x99\x1b\xe5\xbd\x3a\x75\xb8\xc4\xc7\x9a\xed\x2c\x3c\x56\x75\x59\xe0\xbd\x35\x22\xb5\x54\xc4\x3a\xca\x84\x15\xc3\x36\x4d\xa0\x12\x76\x01\xb7\x53\x9f\x51\x02\x39\x89\x0d\x5b\xf3\xc8\x57\x3e\xf6\xf5\xa5\x94\x2d\x1c\x8f\xa1\xe5\x00\x4e\x65\x98\xe4\xce\x6e\xcc\x58\x20\x73\xb0\x30\x1e\x83\x92\x05\x89\x76\xf0\x28\x59\xb0\x60\xc7\xdc\xbc\xb5\x9d\x74\xae\x1b\x95\x39\x85\xc6\x2d\x24\xa0\x97\x64\x98\x2c\xf1\xa8\x75\x7a\x42\x8b\x64\xc7\x85\xd5\x86\x54\xf3\x8f\x5a\xaa\x88\x02\x4f\x20\xe4\x61\x3c\x85\x31\xbc\xf2\x56\x1e\xba\x04\x2c\x6a\x84\x67\x9c\x1c\xbd\xd8\xcb\xd3\x4e\x18\x0b\xea\xb5\xb4\xe9\x02\x2c\xff\x53\xaa\x2c\x72\x53\x90\x8a\x1a\x7b\x98\xae\x0b\x99\xe2\x31\x0b\x82\xd5\x10\xbc\x6f\xa2\x68\x86\xe8\x05\xb9\x36\x20\x49\xe2\xed\x09\x48\xf8\x1d\x56\xfc\x13\xaa\x28\x3e\x01\xf9\xfa\xb5\x8b\x30\x38\xa8\xe6\x8a\x5f\xa8\x0c\xef\x23\x19\xf3\x8b\xae\xa6\x51\x9c\x80\xa8\x2a\x54\x59\x1b\x7b\x4b\xd1\xfc\xc2\x6a\x11\xc9\x38\x6e\x6b\x1c\xb3\x20\xd8\xb1\x20\x98\x19\x14\xcb\x87\xd1\xba\x56\xa4\x70\x9f\xaf\xf5\xcb\x53\xb9\x6c\xca\x73\x89\x45\x76\x90\x4f\x4e\x22\x96\xfb\x0d\xe9\x34\xa9\x49\x6e\x26\x67\x93\xe3\xb6\xe5\x64\x0e\x58\x56\x76\x43\x5b\x34\xe4\x8e\xa7\x8f\xc7\xd0\xd5\xe9\xba\x2a\xa4\x8d\x72\x7e\x23\xe6\xfc\x03\xda\x28\x74\xe7\x5b\x9c\x40\x98\x84\xf1\xed\xdb\x29\x7b\x02\xb7\xce\xdf\x4f\x70\xeb\x5c\x3d\x00\xec\x00\xa8\x5e\xfb\x78\xdf\x13\x79\x69\x3d\x8f\xe4\x51\xd8\x4f\x1a\x28\x6d\x61\x83\x16\x64\x59\x15\x58\xa2\xb2\x98\x85\xb1\xef\x9d\x41\x2f\xf5\xcc\x93\xc2\x91\x3f\xfc\x62\x98\x35\xb2\xc8\x3e\xd3\x59\xfc\x45\x18\xdb\xf2\x4b\x24\x89\x4a\x0e\x27\x59\x13\x9d\x1e\x0d\xb8\x35\xe9\x4e\xc9\x77\x3a\xdb\x80\xe7\xe9\x18\xa2\x23\xc7\xb0\xad\xdc\x90\xb7\x57\xc2\xc0\x0c\xdc\x7d\x81\xbf\x6b\xf2\x9c\x0e\x8e\x35\x21\xdd\xdf\x04\xf8\x25\xae\xff\x36\xd2\xa2\x89\x5e\xcd\xa8\x58\xfd\x81\x58\x3b\x44\x9d\x35\xd2\x58\xf3\x53\x83\xc2\xe2\xb9\x36\x6d\xd1\xf7\x67\x67\x1d\xb6\x4c\x41\xb2\xff\x7b\x8a\x2b\x9c\x19\x0f\xce\x77\x6f\x72\xec\x60\x3d\xaf\x8c\x54\x36\x7a\xe4\xd4\x77\x42\x34\xc8\x36\x7e\x81\x0b\x4f\x79\x94\xa6\x58\x62\xf4\x04\xf5\xb1\x7d\x47\xda\x85\xac\x21\xd7\x26\xc5\x1a\xec\x02\x41\x98\x79\x43\xd5\x04\xab\x41\x14\x6b\xb1\xa9\x61\x86\x40\xc7\x4f\x06\xae\x44\xec\xb0\xf3\xdc\x5a\xd2\xf3\xed\x76\x70\x3f\x48\x20\x74\xbb\xe1\xae\x6f\x38\x16\x50\x2b\x7e\x16\xd5\x41\x74\x52\xd9\x69\x67\xc0\xa5\xe9\xa6\x8c\x12\xd1\x06\x96\xb8\xf1\xea\x6e\x38\xdd\xb9\xe1\xf3\x73\xfc\xb6\x7e\xa6\x40\x05\x46\x0f\x68\xc2\x1b\xe1\xdd\xbd\x21\x3e\xa1\x29\x7a\x0c\xe8\x63\x44\x1d\xa4\x24\xd9\x57\x4e\x6a\x7e\xaa\xab\x4d\x44\xde\x7b\xa3\xf1\xc9\xaf\x9a\x6a\x21\xb8\x95\x44\xc0\x3d\x70\x4b\xdc\x10\x7b\x49\x78\x3d\x86\xff\xfb\x3a\xb6\x82\xef\xa8\x7f\xfb\x3c\x0f\x2e\x21\xad\xc4\x0b\x7a\xa3\x14\xd5\x7f\x36\x76\x29\x2a\x1a\xe5\x41\x83\xee\xb5\xda\xce\x1c\x86\xe6\x5a\x73\xcd\x4f\x0b\x5d\x63\x14\xbb\xf9\xbf\xeb\xcd\xbb\xd1\xbc\xc4\x75\x37\xe6\xe1\x97\xc9\xf5\x4d\x98\x40\xca\xbf\x5e\x7d\x4a\xc0\x0f\xdd\x2f\xc6\x2e\x73\x4f\x09\x07\x72\x77\xed\xd5\x0a\xc6\x6e\xb3\xbb\x68\xb5\x44\xd4\xed\xf2\x6b\xe2\xd1\xf6\x82\xf8\x86\x78\x3f\x4c\x60\xcd\x29\xe9\x33\x61\xc5\xe0\xe6\x18\xc5\xf1\x9e\xc2\x5c\x26\x8e\xc7\xfe\x0d\x00\x00\xff\xff\x8e\x3d\xe5\x1d\xdf\x0c\x00\x00")

func templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateClientTmpl,
		"template/client.tmpl",
	)
}

func templateClientTmpl() (*asset, error) {
	bytes, err := templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/client.tmpl", size: 3295, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateRequestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6f\xeb\x36\x0c\x7d\x96\x7e\x05\x27\xdc\x7b\xe1\x14\xae\x76\xb1\xc7\x00\x19\x70\x97\xae\xed\x80\xf5\x63\x4d\xbb\x97\xa2\x40\x14\x9b\x4e\x34\x28\xb2\x23\xc9\xed\x02\xc1\xff\x7d\xa0\xec\xac\xee\xc7\x43\xfb\x26\x89\x3c\x24\xcf\x21\xc5\x18\xa1\xc4\x4a\x5b\x04\xe1\x70\xd7\xa2\x0f\x02\xba\x8e\x3f\x2a\x07\x31\x82\xbc\x54\x5b\x84\xae\x83\x19\x2c\xe9\xfa\x57\x8b\x6e\x0f\x5d\xb7\xe4\x3c\x46\x70\xca\xae\x11\xe4\xb5\xda\x9b\x5a\x95\x72\x11\x5c\x5b\x04\x4f\x70\x16\x63\xc0\x6d\x63\x54\x40\x10\x3e\xbd\x0b\x90\x64\x89\x11\xd0\x96\x74\xe2\x61\xdf\x20\x38\xf4\x4d\x6d\x3d\x8e\x93\xf5\x00\x88\x9c\x9d\xa8\xa0\xe0\x68\x64\x1b\x72\xc1\xf2\x1f\x5f\xdb\xa9\x28\x55\x50\x62\xc9\xd9\xef\xce\xd5\xce\xc3\xfd\xc3\x7a\x67\x90\xce\x32\xbd\x1c\xdc\xd2\x93\x17\x4b\xde\x71\x5e\xb5\xb6\x80\xac\x80\xa3\xb9\xd1\x68\xc3\x64\x4c\x33\xe3\x00\x00\x31\x1e\x83\xae\x40\x9e\x2b\xff\x87\x6d\xda\xd0\x75\x31\xf6\x54\xbf\x68\x5b\xe2\xbf\x39\x7c\x41\x83\x5b\xb4\x01\xa6\x33\x90\x3f\xdc\xba\xa5\x8b\x27\xbf\x67\x12\x74\x3e\xd5\x68\x4a\x79\x56\xdf\x12\xd3\xae\xcb\x63\x44\x5b\x26\x37\xd2\xe0\x98\x84\xaa\x9b\xe0\xe1\xe8\xa6\x97\xfe\xaa\x09\x7e\x02\xd9\x3b\x84\x73\x48\x1c\x26\x24\xca\xd0\xa7\xdf\xea\x72\x9f\x9e\xa9\x0a\xe2\x29\x2f\x94\xf3\x1b\x65\xb2\xc1\x21\x72\xc6\x52\xc3\xa6\x63\x8e\x39\x67\xec\x35\xc3\xd4\x32\xf6\xb7\x72\x5a\xad\x0c\xfa\x29\x6c\x55\x73\xef\x83\xd3\x76\xfd\xa0\x6d\x40\x57\xa9\x02\x63\x17\x07\xe8\xc7\xc4\xe0\x8c\x31\x31\x4a\x2c\xde\x2d\x63\x18\x06\xc6\xde\xbc\x74\x13\xce\x99\xae\x12\xc3\x9f\x66\x60\xb5\x21\xf2\xcc\x61\x68\x9d\xa5\x6b\x22\xcf\x59\xc7\xf9\x98\xd0\x5d\x43\x7a\x9d\x6a\x83\xa9\x06\x87\xbb\xff\x45\x2a\xe4\xaa\xd5\xa6\xbc\x68\x4d\xd0\xd7\xca\x85\x41\xf5\x4c\x93\x06\x39\x50\x2b\x72\x18\xa9\xfb\xe1\x02\xfa\xba\x8d\x47\x78\x9d\x72\x13\x42\x23\x2f\xf1\xe9\x90\x4a\x5c\x5f\x2d\x6e\x45\x0e\x85\xbc\xbb\xf9\x33\x87\xd5\x3e\xa0\xef\xed\xaa\x44\x97\x8d\x93\x7f\x82\xbe\xae\x52\xf1\x2f\xfd\x76\xf2\x3c\x05\x85\x59\x32\x0e\xb7\x1e\xf0\x6c\x95\x0b\x0c\x99\x98\xd7\x36\xa0\x0d\xc7\x34\xa8\x22\x07\xa1\x9a\xc6\xe8\x42\x05\x5d\xdb\x9f\x69\xb4\xc4\x84\x8f\x7b\x43\x01\x7c\x33\xd2\xf5\xa4\xa6\xd2\x3f\x5a\x31\x70\xce\x4a\xac\xd0\xa5\xdf\x2f\x89\xad\x9c\x9b\xda\x63\x46\x11\x56\xe3\xb9\xd6\x75\x1b\xb4\x91\x24\xcf\x0f\x43\x93\x3d\xf8\x7f\x4e\x9c\x04\x5b\x04\x15\x5a\x3f\xaf\x4b\x24\xc8\x2f\xdf\xbf\xbf\x81\x54\xdb\xd0\xef\x8d\x2a\x13\x43\xc3\xe0\x54\x69\x83\x25\x3c\xe9\xb0\x01\x9f\x22\x40\x51\x97\x38\x85\xaf\x65\x0e\x54\xea\x14\xbe\x3e\x8a\xfc\x75\x8a\x1c\xfa\xef\x93\xad\xfa\x56\xa6\x4a\x68\xa9\x36\xc3\x02\x7b\x67\xef\x71\x46\x74\x86\xbf\x7c\x67\xb7\xc3\x6f\xee\xf5\xf8\x36\x00\x3f\x47\xdc\xa0\xcd\x06\x60\xcf\xcc\x4f\xe0\x57\x78\xcb\xfc\xdb\x99\x53\xcd\x66\x67\x92\x4f\xec\x3d\xa7\xf0\x12\xd9\x1d\x46\x27\xc1\x0e\x36\xda\xd0\x39\x05\xe1\xa3\xdd\xfe\x5f\x00\x00\x00\xff\xff\x73\xbb\xcc\xd9\x55\x06\x00\x00")

func templateRequestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateRequestTmpl,
		"template/request.tmpl",
	)
}

func templateRequestTmpl() (*asset, error) {
	bytes, err := templateRequestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/request.tmpl", size: 1621, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x4f\xe3\x30\x10\x85\xef\xf9\x15\x6f\x7b\x58\x35\xab\xdd\xf4\xbe\x52\x4f\xab\x2d\x88\x43\x39\x50\xc4\x01\xa1\x6a\x70\xc6\xad\x91\xeb\x54\x63\x07\xa8\xac\xfc\x77\x64\x37\x8e\x8a\x10\x39\x4d\xf2\xbe\x79\x99\x79\x13\x23\x5a\xd6\xc6\x31\x66\x3e\x48\xaf\xc2\x0c\xc3\x50\x55\xe1\x74\x64\xc4\x88\x66\x4d\x07\xc6\x30\xe0\x2c\x22\x56\x31\xfe\x81\x90\xdb\x31\x9a\x95\x61\xdb\xfa\xc4\x03\xf8\x44\xa7\xfa\xaa\xdb\x24\x93\xf1\x6d\x43\xbb\x04\xa6\x6e\x76\x6d\x2a\x87\xaa\x8a\x11\x46\xa3\xb9\x26\xbf\x12\xda\x1d\xd8\x85\xec\xa6\x7b\xa7\x30\xd7\xf8\x75\x61\x59\xe3\xde\x1d\x48\xfc\x9e\xec\xcd\xdd\xed\x7a\xde\x52\x20\x3c\x3e\x3d\x9f\x02\xd7\x60\x91\x4e\x10\xf3\x18\xaf\x24\x48\xd3\xbb\xd4\x57\x8a\xac\xb0\x08\xfe\x2e\xf1\xe2\x3b\xd7\x4c\x66\xd9\xe8\x37\x7e\x16\xb2\xae\x32\x6b\x74\xc6\x7f\x2c\xe1\x8c\x1d\x9d\xd3\x23\x1c\x7a\x71\x49\xcb\x9f\x86\x33\xbd\x58\xe0\xff\x7b\x10\x52\x01\xb6\x53\x64\x31\x26\x63\x34\xc8\x9d\x0a\xf2\x8f\x7a\xcf\x1e\xca\x88\xea\x2d\x09\x6c\xd7\x1d\x8b\xf6\x60\xac\x85\x63\x6e\xe1\x59\x75\xae\x1d\xf3\x2e\x72\x9a\xe5\xbb\xc9\x75\x3d\x0d\xa1\x9b\xed\x76\xda\x7d\x39\x6d\xdf\x6c\x4a\x0c\x19\xf4\x6f\x26\xa8\xfd\xfc\x8b\x5a\x5f\xec\x99\x92\x2f\x37\x99\xfe\xc8\x32\x9e\x7a\x5c\x7b\x0c\xc3\x19\x5b\xa5\xcb\x96\xc3\x4e\xd5\x47\x00\x00\x00\xff\xff\x22\x83\x52\x60\x5c\x02\x00\x00")

func templateStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateStructTmpl,
		"template/struct.tmpl",
	)
}

func templateStructTmpl() (*asset, error) {
	bytes, err := templateStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/struct.tmpl", size: 604, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/client.tmpl":  templateClientTmpl,
	"template/request.tmpl": templateRequestTmpl,
	"template/struct.tmpl":  templateStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"client.tmpl":  &bintree{templateClientTmpl, map[string]*bintree{}},
		"request.tmpl": &bintree{templateRequestTmpl, map[string]*bintree{}},
		"struct.tmpl":  &bintree{templateStructTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
