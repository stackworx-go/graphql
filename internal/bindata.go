// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/client.tmpl
// template/request.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x8f\xda\x30\x10\x3d\xc7\xbf\x62\x94\x53\xb2\xda\x26\x52\x8f\xbd\xee\x47\xbb\x55\xbb\xb4\xc0\xf6\x82\xd0\x62\x92\x21\xb8\x18\xdb\xd8\x13\xba\x08\xe5\xbf\x57\x93\x0f\x88\xaa\xb6\x39\xf8\x63\x78\x6f\x66\xde\x1b\x93\xe7\x70\x67\x4b\x84\x0a\x0d\x7a\x49\x58\xc2\xfa\x04\x95\xa2\x6d\xbd\xce\x0a\xbb\xcf\x03\xc9\x62\xf7\xcb\xfa\xb7\x77\x95\xcd\x2b\x2f\xdd\xf6\xa0\x6f\xe1\x7e\x02\xcf\x93\x39\x3c\xdc\x3f\xcd\x33\xe1\x64\xb1\x93\x15\xc2\xf9\x0c\xd9\xb7\xee\xfc\x2c\xf7\x08\x4d\x23\x84\xda\x3b\xeb\x09\x12\x11\xc5\xeb\x13\x61\x88\x45\x14\xa3\x29\x6c\xa9\x4c\x95\xff\x0c\xd6\x70\x60\xb3\x27\xde\x94\xed\xd6\x5c\xd9\x9a\x94\xe6\x8b\x41\xca\xb7\x44\x2e\x16\x22\x8a\x47\x5d\x1d\x71\x47\x72\x9b\x57\x07\xed\xa4\x0f\xe8\xf3\xe3\x7b\xbe\xa0\xf7\xd6\xc7\x22\x15\x82\x4e\x0e\xe1\x4e\x2b\x34\x04\x81\x7c\x5d\x10\x9c\x45\xc4\xa9\xb2\x2e\x2a\xa2\x97\xe9\x17\xfe\x49\x99\x4a\x34\x3d\xc1\xe3\xa1\xc6\x30\x66\x7c\xaf\xd1\x9f\x60\xf8\x3a\x38\xfc\xf9\xad\x58\xc8\x87\xf8\xc0\xd8\x78\x25\xa2\x3c\x87\x89\x63\x37\x95\x35\xad\x13\xff\xe7\xd9\x31\x96\xf9\x3f\xa4\x57\x72\xad\x31\xb4\x28\x65\x08\xfd\x46\x16\x78\x6e\x06\xc6\x71\x00\x30\xfa\xe1\x8d\xd0\x04\x65\x4d\x0b\xdf\x4b\xb7\xe8\xca\x2d\xff\x42\xc4\x0b\x36\x5e\x5d\x54\xf3\xdc\x66\x85\xd4\xd2\x3f\x2a\x8d\x2f\x4e\x5b\x59\x42\xd3\x8c\x5c\xe0\xf8\xd0\xb4\xb2\xd9\x14\x65\x89\xbe\x0b\x1b\xd6\x77\xb1\x46\x44\x77\xd6\x10\x1a\x9a\x73\xe2\xab\xbb\x9b\xda\x14\x90\xd4\x70\xf3\x8f\x5a\x29\x7c\x95\x3e\x6c\xa5\xfe\x3c\x9b\x3c\x27\x29\x24\x8b\x25\x3f\x97\x5b\x68\x27\x9a\x72\x0f\x1e\xa9\xf6\x06\x58\x47\xd6\x83\x13\xa3\x74\x7a\x91\x31\xed\x86\x37\x71\x14\x46\xad\x7f\x6a\x7b\x85\x76\xf2\xdd\xf9\x42\xe0\xc5\xf4\xe3\xe9\xd1\xf3\x51\x88\x27\xd6\xdb\xf6\xfa\x3a\x60\x47\xb6\x7d\xec\xfe\x0c\x0f\xdc\xe1\x28\x45\x7b\x0f\xb0\x58\x0e\xef\x31\x6b\x23\x57\x17\x10\x6e\xc6\xd4\x14\xda\x2d\x49\x87\x9a\x57\xad\x71\x8f\x1b\xa4\xc1\xa3\x54\x1a\xcb\x98\x73\xb1\x91\x4f\xc6\xd5\x34\x6b\x2b\x07\x68\x9a\xdf\x01\x00\x00\xff\xff\x59\xbe\x58\xc6\xcb\x03\x00\x00")

func templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateClientTmpl,
		"template/client.tmpl",
	)
}

func templateClientTmpl() (*asset, error) {
	bytes, err := templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/client.tmpl", size: 971, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateRequestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xdd\x4e\xdc\x3c\x10\xbd\xb6\x9f\x62\xbe\x08\x50\x82\x42\x3e\xd4\xcb\x48\x5b\x89\x2e\x6d\xa9\xd4\x02\xe5\xa7\x37\x08\x69\xbd\xc9\x64\xd7\x95\xd7\xc9\xda\x0e\x74\x15\xf9\xdd\xab\x71\xb2\x34\xfc\x5c\x2c\x77\x99\xcc\x9c\xf1\x39\x67\xc6\x7e\x10\x06\xba\x0e\xb2\x73\xb1\x42\xf0\x1e\x26\x30\xa3\xf0\x67\x8b\x66\x03\xde\xcf\x38\xa7\xf0\x52\x6c\x54\x2d\x4a\xf0\x9e\x73\xb7\x69\x10\x0c\xda\xa6\xd6\x16\xc7\x50\xeb\x4c\x5b\x38\xe8\x38\x3b\x15\x4e\xc0\xe1\x28\xb7\xc5\xcf\x7e\xdb\x5a\xe7\x51\x29\x9c\x88\x66\x9c\x7d\x36\xa6\x36\x16\xee\xee\x17\x6b\x85\xf4\x9d\x85\x3f\xdb\xb2\xf0\xcb\x46\x33\xee\x39\xaf\x5a\x5d\x40\x5c\xc0\xe1\x54\x49\xd4\x2e\x19\x93\x8e\x39\x00\x40\xd7\x1d\x81\xac\x20\x3b\x13\xf6\x9b\x6e\x5a\xe7\x7d\xd7\x19\xa1\x17\x08\x7b\x52\x97\xf8\x27\x85\x3d\x54\xb8\x42\xed\x20\x9f\x40\x76\x62\x16\x2d\x05\x96\xea\xfe\x89\xa0\xef\x1b\x52\xe8\x7d\xda\x75\xa8\xcb\x90\x46\x5d\xc2\x91\xf7\x9c\xd5\x8d\xb3\x70\x78\x85\xeb\x16\xad\xbb\x68\x9c\x4d\x20\x7e\x43\x68\x0a\x81\x7b\x02\x1d\x00\x91\x63\xa6\x47\x7c\xaa\xcb\x4d\xc8\x11\x05\x12\x99\xfd\x10\xc6\x2e\x85\x8a\x87\x82\x8e\x33\x16\xbc\xcf\xc7\x02\x53\xce\xd8\x4b\x79\x44\x96\x33\xf6\x4b\x18\x29\xe6\x0a\x6d\x0e\x2b\xd1\xdc\x59\x67\xa4\x5e\xdc\x4b\xed\xd0\x54\xa2\xc0\xce\x53\xc7\x00\xde\xcd\x0b\xaa\x8e\x46\x47\x47\xaf\x88\x84\x66\x64\x48\x28\xf6\x69\x30\xff\xd9\x4f\x9f\x70\xce\x64\x15\x74\xfe\x37\x01\x2d\x15\x2d\x05\x33\xe8\x5a\xa3\x29\x0c\x16\x70\xe6\x39\x27\x63\x9e\x0c\x59\x3a\xd7\x64\xe7\xf8\x38\xd8\x1b\x47\x97\x17\xd7\x37\x51\x0a\x45\x76\x7b\xf5\x3d\x85\xf9\xc6\xa1\xed\xf3\xa2\x44\x13\x8f\x3c\x4d\x76\x3d\x11\x00\xfa\xca\x30\xc8\x67\xa5\xeb\xec\x2c\xf4\x85\x49\x48\x0e\xd1\x13\xcb\x21\xce\xae\xd1\xc5\xd1\xb4\xd6\x0e\xb5\x3b\xa2\x4d\x89\x52\x88\x44\xd3\x28\x59\x08\x27\x6b\xfd\x3f\x8d\x35\x4a\x02\xc8\x36\x4f\xda\x8a\xec\xb4\x26\xc6\x3b\x13\xe5\x9c\x95\x58\xa1\x09\x57\x2d\x23\x91\xd9\x54\xd5\x16\x63\xea\x30\x1f\xef\x91\xac\x5b\x27\x55\x46\xae\x9c\x28\xda\xa4\xa1\xfe\x1d\x53\x90\x55\x7f\xcc\xb5\x13\xae\xb5\xd3\xba\x44\x82\x7c\x38\x3e\x7e\x05\xa9\x56\xae\xbf\xa4\x55\x1c\x0d\x73\x82\x2f\x42\x2a\x2c\xe1\x51\xba\x25\xd8\xd0\x01\x8a\xba\xc4\x1c\xf6\xcb\x14\x88\x6a\x0e\xfb\x0f\x51\xfa\xf2\x88\x14\xfa\x6d\x8d\xe7\xfd\x04\x03\x13\x7a\x8f\x9a\xe1\xb5\x78\xe3\x91\xe1\x8c\xe4\x0c\x77\xe7\x56\xaf\x86\xdb\xd3\xfb\x71\x30\x00\xdf\x27\x5c\xa1\x8e\x07\x60\xaf\xcc\x26\xf0\x11\x5e\x2b\x3f\xf8\x6a\x44\xb3\x5c\xab\x50\xd3\xf5\x95\x39\x3c\x47\xfa\xed\xba\x04\xd8\x36\x47\xcf\x61\x4a\x4d\xb8\xe7\x7f\x03\x00\x00\xff\xff\xee\x34\x44\xd0\x70\x05\x00\x00")

func templateRequestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateRequestTmpl,
		"template/request.tmpl",
	)
}

func templateRequestTmpl() (*asset, error) {
	bytes, err := templateRequestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/request.tmpl", size: 1392, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/client.tmpl":  templateClientTmpl,
	"template/request.tmpl": templateRequestTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"client.tmpl":  &bintree{templateClientTmpl, map[string]*bintree{}},
		"request.tmpl": &bintree{templateRequestTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
