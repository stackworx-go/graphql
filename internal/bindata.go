// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/client.tmpl
// template/request.tmpl
// template/struct.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4b\x6f\xd4\x30\x10\x3e\xc7\xbf\x62\xe4\x53\x52\x95\x44\xe2\xc8\xb5\x0f\x28\x82\x2e\xb4\x5b\x2e\x55\xd5\x7a\x93\x69\xd6\xd4\xb1\xbd\xf6\xa4\x74\x15\xe5\xbf\xa3\xc9\x63\x37\x42\x80\x0f\x7e\x8c\xbf\x6f\x1e\xdf\xd8\x45\x01\x67\xae\x42\xa8\xd1\x62\x50\x84\x15\x6c\xf6\x50\x6b\xda\xb6\x9b\xbc\x74\x4d\x11\x49\x95\x2f\xbf\x5c\x78\x7b\x57\xbb\xa2\x0e\xca\x6f\x77\xe6\x14\xce\x57\x70\xbd\x5a\xc3\xc5\xf9\xd5\x3a\x17\x5e\x95\x2f\xaa\x46\xe8\x3a\xc8\xbf\x8d\xfb\x6b\xd5\x20\xf4\xbd\x10\xba\xf1\x2e\x10\xa4\x22\x91\x9b\x3d\x61\x94\x22\x91\x68\x4b\x57\x69\x5b\x17\x3f\xa3\xb3\x6c\x78\x6e\x88\x17\xed\xc6\xb9\xd0\xae\x25\x6d\xf8\x60\x91\x8a\x2d\x91\x97\x42\x24\x72\x91\xd5\x2b\xbe\x90\xda\x16\xf5\xce\x78\x15\x22\x86\xe2\xf5\x3d\x1f\x30\x04\x17\xa4\xc8\x84\xa0\xbd\x47\x38\x33\x1a\x2d\x41\xa4\xd0\x96\x04\x9d\x48\xd8\x55\x3e\x5a\x45\x72\x77\xf3\x85\xaf\xb4\xad\x45\x3f\x11\x02\xee\x5a\x8c\x4b\xc6\xf7\x16\xc3\x1e\xe6\x31\xc2\xe1\xcf\xf1\xc4\x85\x7c\x90\x3b\xc6\xca\x27\x91\x14\x05\xac\x3c\xab\xa9\x9d\x1d\x94\xf8\x3f\xcf\x2d\xb1\xcc\xff\xa1\x82\x56\x1b\x83\x71\x40\x69\x4b\x18\x9e\x55\x89\x5d\x3f\x33\x5e\x67\x00\xa3\x2f\xde\x08\x6d\xd4\xce\x0e\xf0\x46\xf9\xfb\x31\xdc\xc3\x5f\x88\x78\xc0\xca\xa7\x43\xd5\xdc\xb7\xdb\x52\x19\x15\x2e\xb5\xc1\x3b\x6f\x9c\xaa\xa0\xef\x17\x2a\xb0\x7d\x4e\x5a\xbb\xfc\x06\x55\x85\x61\x34\x5b\xae\xef\x20\x8d\x48\xce\x9c\x25\xb4\xb4\x66\xc7\x47\x75\x9f\x5b\x5b\x42\xda\xc2\xc9\x3f\x62\x65\xf0\x55\x85\xb8\x55\xe6\xf3\xed\xea\x3a\xcd\x20\xbd\x7f\xe0\xe7\x72\x0a\x43\x47\x33\xce\x21\x20\xb5\xc1\x02\xd7\x91\x4f\xe0\xd4\x6a\x93\x1d\xca\xb8\x19\x9b\xb7\xf2\x14\x17\xa9\x7f\x1a\x72\x85\xa1\xf3\xe3\xfe\x40\xe0\xc9\x4e\xed\x99\xd0\xeb\x85\x89\x3b\x36\xc9\xf6\xf8\x38\x63\x17\xb2\x7d\x1c\x3f\xc3\x05\x67\xb8\x70\x31\x9c\x23\xdc\x3f\xcc\xef\x31\x1f\x2c\x47\x15\x10\x4e\x96\xd4\x0c\x86\x25\xcd\xe6\x98\xc7\x5a\xe5\x84\x9b\x4b\x83\x4b\xa5\x0d\x56\x92\x7d\x75\x1d\x04\x65\x6b\x84\xfc\xca\xfa\x96\x6e\x87\xf8\x91\xff\x5c\xd2\x75\x84\x8d\x37\x8a\x10\xe4\x98\x97\x84\x9c\x6f\xba\x0e\xd0\xb2\xdc\xbf\x03\x00\x00\xff\xff\x06\xab\xaa\x6d\xf5\x03\x00\x00")

func templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateClientTmpl,
		"template/client.tmpl",
	)
}

func templateClientTmpl() (*asset, error) {
	bytes, err := templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/client.tmpl", size: 1013, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateRequestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x4f\x1b\x3b\x10\x7d\xb6\x7f\xc5\xdc\x15\xa0\x0d\x5a\x7c\xd1\x7d\x8c\x94\x2b\x71\xc3\x6d\xa9\xd4\x02\x25\xd0\x17\x84\x14\x67\x77\x36\x71\xe5\x78\x37\xb6\x17\x1a\x59\xfe\xef\xd5\x78\x17\x1a\x3e\x1e\xe0\xcd\xe3\xf9\x3a\xe7\xcc\xd8\xf7\xd2\x42\x08\x20\xce\xe5\x1a\x21\x46\x98\xc0\x9c\xcc\xef\x1d\xda\x2d\xc4\x38\xe7\x3c\x04\xb0\xd2\x2c\x11\xc4\xa5\xdc\xea\x46\x56\x62\xe6\x6d\x57\x7a\x07\x31\x72\x16\x82\xc7\x75\xab\xa5\x47\xc8\x5c\xba\xcf\x40\x90\x27\x04\x40\x53\xd1\x89\xfb\x6d\x8b\x60\xd1\xb5\x8d\x71\xb8\xdb\xac\x4f\x80\xc0\xd9\xa9\xf4\x12\x0e\x77\x7c\x43\x2f\x98\xff\x74\x8d\x19\x67\x95\xf4\x32\x9b\x73\xf6\xbf\xb5\x8d\x75\x70\x7b\xb7\xdc\x68\xa4\xb3\x48\x37\x8f\x61\xe9\xca\x65\x73\x1e\x39\xaf\x3b\x53\x42\x5e\xc2\xe1\x54\x2b\x34\x7e\xb4\x4b\x33\xe7\x00\x00\x21\x1c\x81\xaa\x41\x9c\x49\xf7\xc5\xb4\x9d\x8f\x31\x84\x9e\xea\x9e\x32\x15\xfe\x2a\x60\x0f\x35\xae\xd1\x78\x18\x4f\x40\x9c\xd8\x65\x47\x86\xa3\xb8\x3f\x24\xe8\x7c\x4d\x0c\x63\x2c\x42\x40\x53\x25\x37\x71\x3f\x22\x81\x9a\xd6\x3b\x38\xbc\xc2\x4d\x87\xce\x5f\xb4\xde\x8d\x20\x7f\x83\x68\x01\x09\xfb\x08\x02\x00\x81\x63\xb6\xcf\xf8\xaf\xa9\xb6\xc9\x47\x10\x88\xa4\xf8\x26\xad\x5b\x49\x9d\x0f\x01\x81\x33\x96\xa6\x35\xde\x25\x58\x70\xc6\x5e\xd2\x23\xb0\x9c\xb1\x1f\xd2\x2a\xb9\xd0\xe8\xc6\xb0\x96\xed\xad\xf3\x56\x99\xe5\x9d\x32\x1e\x6d\x2d\x4b\x0c\x91\x2a\xa6\xe4\xf7\x69\x41\xd1\xd9\x4e\xeb\xec\x15\x90\x54\x6c\x58\x06\xc6\x62\x91\xc4\x7f\x76\x19\x47\x9c\x33\x55\x27\x9e\x7f\x4d\xc0\x28\x4d\x4b\xc1\x2c\xfa\xce\x1a\x32\x93\x04\x9c\x45\xce\x49\x98\x27\x41\x56\xde\xb7\xe2\x1c\x1f\x06\x79\xf3\xec\xf2\x62\x76\x9d\x15\x50\x8a\x9b\xab\xaf\x05\x2c\xb6\x1e\x5d\xef\x97\x15\xda\x7c\x47\xd3\xd1\x7b\x3b\x02\x40\x1f\x99\x06\xf9\x2c\x74\x23\xce\x52\x5d\x98\x24\xe7\x60\x3d\xa1\x1c\x6c\x31\x43\x9f\x67\xd3\xc6\x78\x34\xfe\x88\x36\x25\x2b\x20\x93\x6d\xab\x55\x29\xbd\x6a\xcc\xdf\x34\xd6\x6c\x94\x92\x5c\xfb\xc4\xad\x14\xa7\x0d\x21\x7e\x37\x50\xce\x59\x85\x35\xda\xf4\xd4\x04\x91\x14\x53\xdd\x38\xcc\xa9\xc2\x62\x77\x8f\x54\xd3\x79\xa5\x05\xa9\x72\xa2\x69\x93\x86\xf8\x0f\x4c\x41\xd5\x7d\x9b\x99\x97\xbe\x73\xd3\xa6\x42\x4a\xf9\xe7\xf8\xf8\x55\x4a\xbd\xf6\xfd\x23\xad\xf3\x6c\x98\x13\x7c\x92\x4a\x63\x05\x0f\xca\xaf\xc0\xa5\x0a\x50\x36\x15\x8e\x61\xbf\x2a\x80\xa0\x8e\x61\xff\x3e\x2b\x5e\xb6\x28\xa0\xdf\xd6\x7c\xd1\x4f\x30\x21\xa1\x1f\xac\x1d\x7e\x8b\x37\x3e\x19\xce\x88\xce\xf0\x76\x6e\xcc\x7a\x78\x3d\xbd\x1e\x07\x43\xe2\xc7\x88\x6b\x34\xf9\x90\xd8\x33\x73\x23\xf8\x17\x5e\x33\x3f\xf8\x6c\x65\xbb\xda\xe8\x14\x13\xfa\xc8\x31\x3c\xcf\x8c\x8f\xeb\x92\xd2\x1e\x7d\xf4\x1d\x16\x54\x84\x47\xfe\x3b\x00\x00\xff\xff\x63\x7f\x64\x92\xa2\x05\x00\x00")

func templateRequestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateRequestTmpl,
		"template/request.tmpl",
	)
}

func templateRequestTmpl() (*asset, error) {
	bytes, err := templateRequestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/request.tmpl", size: 1442, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x4f\xe3\x30\x10\x85\xef\xf9\x15\x6f\x7b\x58\x35\xab\xdd\xf4\xbe\x52\x4f\xab\x2d\x88\x43\x39\x50\xc4\x01\xa1\x6a\x70\xc6\xad\x91\xeb\x54\x63\x07\xa8\xac\xfc\x77\x64\x37\x8e\x8a\x10\x39\x4d\xf2\xbe\x79\x99\x79\x13\x23\x5a\xd6\xc6\x31\x66\x3e\x48\xaf\xc2\x0c\xc3\x50\x55\xe1\x74\x64\xc4\x88\x66\x4d\x07\xc6\x30\xe0\x2c\x22\x56\x31\xfe\x81\x90\xdb\x31\x9a\x95\x61\xdb\xfa\xc4\x03\xf8\x44\xa7\xfa\x8a\xc3\x26\xb9\x8c\xaf\x1b\xda\x25\x32\xb5\xb3\x6b\x53\x39\x54\x55\x8c\x30\x1a\xcd\x35\xf9\x95\xd0\xee\xc0\x2e\x64\x3b\xdd\x3b\x85\xb9\xc6\xaf\x0b\xcf\x1a\xf7\xee\x40\xe2\xf7\x64\x6f\xee\x6e\xd7\xf3\x96\x02\xe1\xf1\xe9\xf9\x14\xb8\x06\x8b\x74\x82\x98\xe7\x78\x25\x41\x1a\xdf\xa5\xbe\x52\x64\x85\x45\xf0\x77\x89\x17\xdf\xb9\x66\x32\xcb\x46\xbf\xf1\xb3\x90\x75\x95\x59\xa3\x33\xfe\x63\x09\x67\xec\xe8\x9c\x1e\xe1\xd0\x8b\x4b\x5a\xfe\x34\x9c\xe9\xc5\x02\xff\xdf\x83\x90\x0a\xb0\x9d\x22\x8b\x31\x1a\xa3\x41\xee\x54\x90\x7f\xd4\x7b\xf6\x50\x46\x54\x6f\x49\x60\xbb\xee\x58\xb4\x07\x63\x2d\x1c\x73\x0b\xcf\xaa\x73\xed\x18\x78\x91\xd3\x2c\xdf\x4d\xae\xeb\x69\x08\xdd\x6c\xb7\xd3\xee\xcb\x69\xfb\x66\x53\x62\xc8\xa0\x7f\x33\x41\xed\xe7\x5f\xd4\xfa\x62\xcf\x94\x7c\xb9\xc9\xf4\x47\x96\xf1\xd6\xe3\xda\x63\x18\xce\xd8\x2a\x5d\xb6\x1c\x76\xaa\x3e\x02\x00\x00\xff\xff\xe5\xf9\x2f\x06\x5d\x02\x00\x00")

func templateStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateStructTmpl,
		"template/struct.tmpl",
	)
}

func templateStructTmpl() (*asset, error) {
	bytes, err := templateStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/struct.tmpl", size: 605, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/client.tmpl":  templateClientTmpl,
	"template/request.tmpl": templateRequestTmpl,
	"template/struct.tmpl":  templateStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"client.tmpl":  &bintree{templateClientTmpl, map[string]*bintree{}},
		"request.tmpl": &bintree{templateRequestTmpl, map[string]*bintree{}},
		"struct.tmpl":  &bintree{templateStructTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
