// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/client.tmpl
// template/request.tmpl
// template/struct.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xcd\x72\xdb\x38\x12\x3e\x93\x4f\xd1\xcb\x43\x8a\xb4\x19\x28\xb5\x47\x7b\x7d\xd8\xd8\x71\xc6\x99\xc4\xca\xd8\x4a\xe6\xa0\x52\x25\x10\xd9\x94\x30\x22\x01\x1a\x04\xa5\xa8\x54\x7a\xf7\xa9\x06\x40\x8a\xf2\xcf\x4c\xa2\x83\x04\x01\xfd\xfb\x75\xf7\x07\x8c\x46\x70\xa9\x72\x84\x05\x4a\xd4\xdc\x60\x0e\xf3\x2d\x2c\x84\x59\xb6\x73\x96\xa9\x6a\xd4\x18\x9e\xad\x36\x4a\xff\x78\xbd\x50\xa3\x85\xe6\xf5\xf2\xa1\x4c\xe1\x6a\x0c\xb7\xe3\x09\xbc\xbb\xba\x99\xb0\xb0\xe6\xd9\x8a\x2f\x10\x76\x3b\x60\x9f\xdd\xfa\x96\x57\x08\xfb\x7d\x18\x8a\xaa\x56\xda\x40\x1c\x06\xd1\x7c\x6b\xb0\x89\xc2\x20\x42\x99\xa9\x5c\xc8\xc5\xe8\xaf\x46\x49\xda\x28\x2a\x43\x3f\x42\xb9\xef\x91\x50\xad\x11\x25\xfd\xa9\x44\x85\xa3\xaa\x2d\x8d\xa8\xb9\xb6\x42\x12\xcd\x68\x69\x4c\x4d\x6b\x8d\x45\x89\x99\xdd\x6e\x8c\xce\x94\x5c\xfb\xa5\x90\x8b\x26\x0a\xc3\x20\x1a\x24\xb2\xc6\x95\xe1\xcb\xd1\xe2\xa1\xac\xb9\x6e\x50\x8f\xd6\xff\xa5\x3f\xa8\xb5\xd2\x51\x98\x84\xa1\xd9\xd6\x08\x97\xa5\x40\x69\xa0\x31\xba\xcd\x0c\xec\xc2\x80\x7c\x31\xb7\x1b\x06\x5f\xee\x3e\x82\x33\x1f\xee\xbd\x82\xc6\x87\x16\x9b\xa1\xc6\x1f\x2d\xea\x2d\x74\x1f\x27\x0e\x8f\x3f\xdf\x29\xf7\xb3\xe8\x81\x64\xa3\xef\x61\x30\x1a\xc1\xb8\xa6\x02\x08\x25\x2d\x78\xff\xac\xa7\x86\xb2\xa4\xff\x95\x6b\xc1\xe7\x25\x36\x56\x4a\x48\x83\xba\xe0\x19\xee\xf6\x9d\xc6\xba\x13\x20\xe9\x77\x3f\x0c\xca\x46\x28\x69\xc5\x2b\x5e\x4f\x9d\xbb\xd9\x33\x8a\xd8\xcb\x46\xdf\xfb\xac\xa9\xd4\xf7\x19\x2f\xb9\xbe\x16\x25\x7e\xa9\x4b\xc5\x73\xd8\xef\x07\x28\xd0\x7e\x17\xb4\x50\xec\x0e\x79\x8e\xda\x6d\x4b\xca\xaf\x87\x26\x0c\x2e\x95\x34\x28\xcd\x84\x0c\x1f\xd0\x2d\x5a\x99\x41\xdc\xc2\xc9\x0b\xbe\x12\xf8\xc4\x75\xb3\xe4\xe5\x87\xfb\xf1\x6d\x9c\x40\x3c\x9d\x51\x87\xa5\x60\x2b\x9a\x50\x0c\x1a\x4d\xab\x25\x50\x1e\xcc\x0b\xc7\x52\x94\x49\x9f\xc6\x9d\x2b\xde\xb8\x36\xcd\x20\xf4\xdf\x6c\xac\x60\x2b\xef\xd6\xbd\x02\x7d\x49\x5f\x1e\x2f\x3d\x19\x6c\x51\xc5\x3c\x6c\xdf\xbe\x75\xb2\x03\xd8\xde\xbb\xf9\x79\x47\x11\x0e\x4c\xd8\xff\x0d\x4c\x67\x5d\x3f\x32\xbb\x73\x40\x01\xe1\x64\xa8\x9a\x80\xfd\x89\x93\xce\xe7\x21\xd7\xc8\xcb\x75\xa9\xc1\x35\x17\x25\xe6\x11\xd9\xda\xed\x40\x73\xb9\x40\x60\x37\xb2\x6e\xcd\xbd\xf5\xdf\xd0\x98\x06\xbb\x9d\xc1\xaa\x2e\xb9\x41\x88\x5c\x5c\x11\x30\x3a\xd9\xed\x00\x65\x6e\x47\xf9\xa0\x4e\x1d\x2e\xf0\xa9\xa6\x9f\x85\xa7\xaa\x36\x0b\xfc\x61\x34\xcf\x0c\x15\xb1\x89\x73\x6e\xf8\xb0\x4d\x53\xa8\xb9\x59\xc2\x74\xe6\x32\x4a\xa1\x20\xb1\x61\x6b\x9e\xb8\xca\x27\xae\xbe\x94\xb2\x81\xb3\x0b\xf0\x1c\xc0\xa8\x0c\xe3\xc2\xda\x4d\xc2\x30\x10\x05\x18\xb8\xb8\x00\x29\x4a\x12\xed\xe0\x91\xa2\x0c\x83\x7d\x68\xe7\xcd\x77\xd2\xb5\x6a\x65\x6e\x15\x5a\xbb\x91\x82\x5a\x91\x61\xb2\xc4\x62\xef\xf4\x9c\x36\xc9\x8e\x0d\xcb\x87\xd4\xb0\x0f\x4a\xc8\x98\x02\x4f\x21\x62\x51\x32\x83\x0b\x78\xe5\xac\x3c\x76\x09\x58\x36\x08\x2f\x38\x39\xf9\x65\x2f\xcf\x3b\x09\xc3\xa0\xd9\x08\x93\x2d\xc1\xb0\xdf\x85\xcc\x63\x3b\x05\x19\x6f\xb0\x87\xe9\xff\x5a\xf3\xed\x59\x18\x04\x9c\x16\x87\x10\xa6\xc3\xd1\x27\x00\x83\x42\x69\x10\x29\xa0\x05\xd9\xd6\xdd\xa9\x50\x7c\xc1\x51\x2d\x31\x05\x5e\xd7\x28\x73\x1f\xa4\xe7\x62\x76\x63\x14\x8f\x45\x92\xf8\x62\x26\x61\x10\xec\xc3\x20\x98\x6b\xe4\xab\x47\x61\xb9\x5e\xa4\xb8\x5e\x2e\x6a\x10\xac\x87\x67\x5f\x79\xd9\x0e\x2b\xee\x02\x26\x89\x37\xe7\x20\xe0\x7f\xb0\x66\xb7\x6d\x75\x2d\xb0\xcc\xe3\xe4\x1c\xc4\xe9\xa9\x0b\xbd\x20\x11\xc3\xdc\x81\xb0\x9a\xd4\x0d\x93\xf1\xd5\xf8\xcc\xf7\x96\x28\x00\xab\xda\x6c\xe9\x88\xa6\xd9\x12\xf2\xd9\x05\x74\x05\xb9\xaf\x4b\x61\xe2\x82\x4d\xf8\x82\xbd\x47\x13\x47\xf6\x22\x4b\x52\x88\xd2\x28\x99\xbe\x99\x85\x4f\x20\x5a\xf7\xfe\xd8\x4d\x87\x73\x9c\x3c\xc2\xad\x73\xf5\x08\xb0\x23\xa0\x7a\xed\xb3\x43\xf1\x8b\xca\x38\xc2\x28\xe2\xa8\xaf\x22\x48\x65\x60\x8b\x06\x44\x55\x97\x58\xa1\x34\x98\x47\x89\x6b\x92\x41\xd3\xf4\x14\x93\xc1\x89\xbb\xe5\x12\x98\xb7\xa2\xcc\x3f\xd1\xa5\xfb\x99\x6b\xe3\x89\x24\x16\xc4\x19\xc7\x23\xab\x88\x37\x4f\x06\x24\x9a\x76\xd7\xe1\x5b\x95\x6f\xc1\x11\x72\x02\xf1\x89\xa5\x52\x2f\x37\x24\xe8\x35\xd7\x30\x07\xfb\x30\x60\x6f\xdb\xa2\xa0\x1b\x62\x43\x48\xf7\x57\x3e\xbb\xc5\xcd\x9f\x5a\x18\xd4\xf1\xab\x39\x15\xab\xbf\xf9\x1a\x8b\xa8\xb5\x46\x1a\x1b\x76\xa9\x91\x1b\xbc\x56\xda\x17\xfd\x70\x49\x36\x91\xa7\x04\x92\xfd\xcf\x73\xa4\x60\xcd\x38\x70\xbe\x39\x93\x17\x16\xd6\xeb\x5a\x0b\x69\xe2\x27\x4e\x5d\x27\xc4\x83\x6c\x93\x5f\x70\xe1\xb8\x8d\xd2\xe4\x2b\x8c\x9f\xe1\xb8\xf0\xb8\x7b\x2c\xf4\x69\x4f\x8e\xbb\xc1\x65\x9e\x42\x64\x4f\xa3\x7d\xdf\x34\x61\x40\xed\xf4\x89\xd7\x47\x1e\x84\x34\xb3\xce\x80\x0d\xd5\x4e\x0a\x05\xa3\x34\xac\x70\xeb\xd4\x0f\xc3\xee\x62\xb4\x64\xb4\x79\x01\xe4\x12\xe3\x47\xa3\xee\x8c\xb0\xee\x92\x4f\xce\x69\x12\x9e\x82\xf2\x14\x15\x0b\x0b\x49\xf6\xe8\x0b\xc5\x2e\x55\xbd\x8d\xc9\x7b\x6f\x34\x39\xff\x59\x53\x1e\x82\xa9\x20\xb6\xec\x81\x5b\xe1\x96\x18\x48\x9c\x9e\xba\x42\x78\xa9\xb7\xd4\x80\x7d\x92\x47\xcf\x05\x2f\xf1\x0b\xc5\xad\x78\xfd\xaf\x9d\x59\xf1\x9a\x66\x71\xd0\x61\x07\x2d\xdf\x5a\xc3\xd0\x6c\x6f\x6d\xd8\x65\xa9\x1a\x8c\x13\x3b\xc0\x0f\xbd\x79\x3b\x5b\xb7\xb8\xe9\xe6\x34\xfa\x3c\xbe\x9f\x44\x29\x64\xec\xcb\xdd\xc7\x14\xdc\xd4\xfc\x64\xec\xa2\x70\x33\x7d\x24\xf7\xe0\x1f\x41\x70\x61\x0f\xbb\x27\x91\x67\x92\xee\x94\xdd\x13\x11\xfa\xa7\xdc\x6b\x22\xee\x28\x85\x0d\xa3\xa4\xaf\xb8\xe1\x83\x37\x5e\x9c\x24\x07\x0e\xb2\x99\x58\x22\xfa\x3b\x00\x00\xff\xff\xce\x86\x0a\x12\x89\x0c\x00\x00")

func templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateClientTmpl,
		"template/client.tmpl",
	)
}

func templateClientTmpl() (*asset, error) {
	bytes, err := templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/client.tmpl", size: 3209, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateRequestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6f\xeb\x36\x0c\x7d\x96\x7e\x05\x27\xdc\x7b\xe1\x14\xae\x76\xb1\xc7\x00\x19\x70\x97\xae\xed\x80\xf5\x63\x4d\xbb\x97\xa2\x40\x14\x9b\x4e\x34\x28\xb2\x23\xc9\xed\x02\xc1\xff\x7d\xa0\xec\xac\xee\xc7\x43\xfb\x26\x89\x3c\x24\xcf\x21\xc5\x18\xa1\xc4\x4a\x5b\x04\xe1\x70\xd7\xa2\x0f\x02\xba\x8e\x3f\x2a\x07\x31\x82\xbc\x54\x5b\x84\xae\x83\x19\x2c\xe9\xfa\x57\x8b\x6e\x0f\x5d\xb7\xe4\x3c\x46\x70\xca\xae\x11\xe4\xb5\xda\x9b\x5a\x95\x72\x11\x5c\x5b\x04\x4f\x70\x16\x63\xc0\x6d\x63\x54\x40\x10\x3e\xbd\x0b\x90\x64\x89\x11\xd0\x96\x74\xe2\x61\xdf\x20\x38\xf4\x4d\x6d\x3d\x8e\x93\xf5\x00\x88\x9c\x9d\xa8\xa0\xe0\x68\x64\x1b\x72\xc1\xf2\x1f\x5f\xdb\xa9\x28\x55\x50\x62\xc9\xd9\xef\xce\xd5\xce\xc3\xfd\xc3\x7a\x67\x90\xce\x32\xbd\x1c\xdc\xd2\x93\x17\x4b\xde\x71\x5e\xb5\xb6\x80\xac\x80\xa3\xb9\xd1\x68\xc3\x64\x4c\x33\xe3\x00\x00\x31\x1e\x83\xae\x40\x9e\x2b\xff\x87\x6d\xda\xd0\x75\x31\xf6\x54\xbf\x68\x5b\xe2\xbf\x39\x7c\x41\x83\x5b\xb4\x01\xa6\x33\x90\x3f\xdc\xba\xa5\x8b\x27\xbf\x67\x12\x74\x3e\xd5\x68\x4a\x79\x56\xdf\x12\xd3\xae\xcb\x63\x44\x5b\x26\x37\xd2\xe0\x98\x84\xaa\x9b\xe0\xe1\xe8\xa6\x97\xfe\xaa\x09\x7e\x02\xd9\x3b\x84\x73\x48\x1c\x26\x24\xca\xd0\xa7\xdf\xea\x72\x9f\x9e\xa9\x0a\xe2\x29\x2f\x94\xf3\x1b\x65\xb2\xc1\x21\x72\xc6\x52\xc3\xa6\x63\x8e\x39\x67\xec\x35\xc3\xd4\x32\xf6\xb7\x72\x5a\xad\x0c\xfa\x29\x6c\x55\x73\xef\x83\xd3\x76\xfd\xa0\x6d\x40\x57\xa9\x02\x63\x17\x07\xe8\xc7\xc4\xe0\x8c\x31\x31\x4a\x2c\xde\x2d\x63\x18\x06\xc6\xde\xbc\x74\x13\xce\x99\xae\x12\xc3\x9f\x66\x60\xb5\x21\xf2\xcc\x61\x68\x9d\xa5\x6b\x22\xcf\x59\xc7\xf9\x98\xd0\x5d\x43\x7a\x9d\x6a\x83\xa9\x06\x87\xbb\xff\x45\x2a\xe4\xaa\xd5\xa6\xbc\x68\x4d\xd0\xd7\xca\x85\x41\xf5\x4c\x93\x06\x39\x50\x2b\x72\x18\xa9\xfb\xe1\x02\xfa\xba\x8d\x47\x78\x9d\x72\x13\x42\x23\x2f\xf1\xe9\x90\x4a\x5c\x5f\x2d\x6e\x45\x0e\x85\xbc\xbb\xf9\x33\x87\xd5\x3e\xa0\xef\xed\xaa\x44\x97\x8d\x93\x7f\x82\xbe\xae\x52\xf1\x2f\xfd\x76\xf2\x3c\x05\x85\x59\x32\x0e\xb7\x1e\xf0\x6c\x95\x0b\x0c\x99\x98\xd7\x36\xa0\x0d\xc7\x34\xa8\x22\x07\xa1\x9a\xc6\xe8\x42\x05\x5d\xdb\x9f\x69\xb4\xc4\x84\x8f\x7b\x43\x01\x7c\x33\xd2\xf5\xa4\xa6\xd2\x3f\x5a\x31\x70\xce\x4a\xac\xd0\xa5\xdf\x2f\x89\xad\x9c\x9b\xda\x63\x46\x11\x56\xe3\xb9\xd6\x75\x1b\xb4\x91\x24\xcf\x0f\x43\x93\x3d\xf8\x7f\x4e\x9c\x04\x5b\x04\x15\x5a\x3f\xaf\x4b\x24\xc8\x2f\xdf\xbf\xbf\x81\x54\xdb\xd0\xef\x8d\x2a\x13\x43\xc3\xe0\x54\x69\x83\x25\x3c\xe9\xb0\x01\x9f\x22\x40\x51\x97\x38\x85\xaf\x65\x0e\x54\xea\x14\xbe\x3e\x8a\xfc\x75\x8a\x1c\xfa\xef\x93\xad\xfa\x56\xa6\x4a\x68\xa9\x36\xc3\x02\x7b\x67\xef\x71\x46\x74\x86\xbf\x7c\x67\xb7\xc3\x6f\xee\xf5\xf8\x36\x00\x3f\x47\xdc\xa0\xcd\x06\x60\xcf\xcc\x4f\xe0\x57\x78\xcb\xfc\xdb\x99\x53\xcd\x66\x67\x92\x4f\xec\x3d\xa7\xf0\x12\xd9\x1d\x46\x27\xc1\x0e\x36\xda\xd0\x39\x05\xe1\xa3\xdd\xfe\x5f\x00\x00\x00\xff\xff\x73\xbb\xcc\xd9\x55\x06\x00\x00")

func templateRequestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateRequestTmpl,
		"template/request.tmpl",
	)
}

func templateRequestTmpl() (*asset, error) {
	bytes, err := templateRequestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/request.tmpl", size: 1621, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x4f\xe3\x30\x10\x85\xef\xf9\x15\x6f\x7b\x58\x35\xab\xdd\xf4\xbe\x52\x4f\xab\x2d\x88\x43\x39\x50\xc4\x01\xa1\x6a\x70\xc6\xad\x91\xeb\x54\x63\x07\xa8\xac\xfc\x77\x64\x37\x8e\x8a\x10\x39\x4d\xf2\xbe\x79\x99\x79\x13\x23\x5a\xd6\xc6\x31\x66\x3e\x48\xaf\xc2\x0c\xc3\x50\x55\xe1\x74\x64\xc4\x88\x66\x4d\x07\xc6\x30\xe0\x2c\x22\x56\x31\xfe\x81\x90\xdb\x31\x9a\x95\x61\xdb\xfa\xc4\x03\xf8\x44\xa7\xfa\xaa\xdb\x24\x93\xf1\x6d\x43\xbb\x04\xa6\x6e\x76\x6d\x2a\x87\xaa\x8a\x11\x46\xa3\xb9\x26\xbf\x12\xda\x1d\xd8\x85\xec\xa6\x7b\xa7\x30\xd7\xf8\x75\x61\x59\xe3\xde\x1d\x48\xfc\x9e\xec\xcd\xdd\xed\x7a\xde\x52\x20\x3c\x3e\x3d\x9f\x02\xd7\x60\x91\x4e\x10\xf3\x18\xaf\x24\x48\xd3\xbb\xd4\x57\x8a\xac\xb0\x08\xfe\x2e\xf1\xe2\x3b\xd7\x4c\x66\xd9\xe8\x37\x7e\x16\xb2\xae\x32\x6b\x74\xc6\x7f\x2c\xe1\x8c\x1d\x9d\xd3\x23\x1c\x7a\x71\x49\xcb\x9f\x86\x33\xbd\x58\xe0\xff\x7b\x10\x52\x01\xb6\x53\x64\x31\x26\x63\x34\xc8\x9d\x0a\xf2\x8f\x7a\xcf\x1e\xca\x88\xea\x2d\x09\x6c\xd7\x1d\x8b\xf6\x60\xac\x85\x63\x6e\xe1\x59\x75\xae\x1d\xf3\x2e\x72\x9a\xe5\xbb\xc9\x75\x3d\x0d\xa1\x9b\xed\x76\xda\x7d\x39\x6d\xdf\x6c\x4a\x0c\x19\xf4\x6f\x26\xa8\xfd\xfc\x8b\x5a\x5f\xec\x99\x92\x2f\x37\x99\xfe\xc8\x32\x9e\x7a\x5c\x7b\x0c\xc3\x19\x5b\xa5\xcb\x96\xc3\x4e\xd5\x47\x00\x00\x00\xff\xff\x22\x83\x52\x60\x5c\x02\x00\x00")

func templateStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateStructTmpl,
		"template/struct.tmpl",
	)
}

func templateStructTmpl() (*asset, error) {
	bytes, err := templateStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/struct.tmpl", size: 604, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/client.tmpl":  templateClientTmpl,
	"template/request.tmpl": templateRequestTmpl,
	"template/struct.tmpl":  templateStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"client.tmpl":  &bintree{templateClientTmpl, map[string]*bintree{}},
		"request.tmpl": &bintree{templateRequestTmpl, map[string]*bintree{}},
		"struct.tmpl":  &bintree{templateStructTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
