// Code generated for package internal by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/client.tmpl
// template/request.tmpl
// template/struct.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4b\x6f\xd4\x30\x10\x3e\xc7\xbf\x62\xe4\x53\x52\x95\x44\xe2\xc8\xb5\x0f\x28\x82\x2e\xb4\x5b\x2e\x55\xd5\x7a\x93\x69\xd6\xd4\xb1\xbd\xf6\xa4\x74\x15\xe5\xbf\xa3\xc9\x63\x37\x42\x80\x0f\x7e\x8c\xbf\x6f\x1e\xdf\xd8\x45\x01\x67\xae\x42\xa8\xd1\x62\x50\x84\x15\x6c\xf6\x50\x6b\xda\xb6\x9b\xbc\x74\x4d\x11\x49\x95\x2f\xbf\x5c\x78\x7b\x57\xbb\xa2\x0e\xca\x6f\x77\xe6\x14\xce\x57\x70\xbd\x5a\xc3\xc5\xf9\xd5\x3a\x17\x5e\x95\x2f\xaa\x46\xe8\x3a\xc8\xbf\x8d\xfb\x6b\xd5\x20\xf4\xbd\x10\xba\xf1\x2e\x10\xa4\x22\x91\x9b\x3d\x61\x94\x22\x91\x68\x4b\x57\x69\x5b\x17\x3f\xa3\xb3\x6c\x78\x6e\x88\x17\xed\xc6\xb9\xd0\xae\x25\x6d\xf8\x60\x91\x8a\x2d\x91\x97\x42\x24\x72\x91\xd5\x2b\xbe\x90\xda\x16\xf5\xce\x78\x15\x22\x86\xe2\xf5\x3d\x1f\x30\x04\x17\xa4\xc8\x84\xa0\xbd\x47\x38\x33\x1a\x2d\x41\xa4\xd0\x96\x04\x9d\x48\xd8\x55\x3e\x5a\x45\x72\x77\xf3\x85\xaf\xb4\xad\x45\x3f\x11\x02\xee\x5a\x8c\x4b\xc6\xf7\x16\xc3\x1e\xe6\x31\xc2\xe1\xcf\xf1\xc4\x85\x7c\x90\x3b\xc6\xca\x27\x91\x14\x05\xac\x3c\xab\xa9\x9d\x1d\x94\xf8\x3f\xcf\x2d\xb1\xcc\xff\xa1\x82\x56\x1b\x83\x71\x40\x69\x4b\x18\x9e\x55\x89\x5d\x3f\x33\x5e\x67\x00\xa3\x2f\xde\x08\x6d\xd4\xce\x0e\xf0\x46\xf9\xfb\x31\xdc\xc3\x5f\x88\x78\xc0\xca\xa7\x43\xd5\xdc\xb7\xdb\x52\x19\x15\x2e\xb5\xc1\x3b\x6f\x9c\xaa\xa0\xef\x17\x2a\xb0\x7d\x4e\x5a\xbb\xfc\x06\x55\x85\x61\x34\x5b\xae\xef\x20\x8d\x48\xce\x9c\x25\xb4\xb4\x66\xc7\x47\x75\x9f\x5b\x5b\x42\xda\xc2\xc9\x3f\x62\x65\xf0\x55\x85\xb8\x55\xe6\xf3\xed\xea\x3a\xcd\x20\xbd\x7f\xe0\xe7\x72\x0a\x43\x47\x33\xce\x21\x20\xb5\xc1\x02\xd7\x91\x4f\xe0\xd4\x6a\x93\x1d\xca\xb8\x19\x9b\xb7\xf2\x14\x17\xa9\x7f\x1a\x72\x85\xa1\xf3\xe3\xfe\x40\xe0\xc9\x4e\xed\x99\xd0\xeb\x85\x89\x3b\x36\xc9\xf6\xf8\x38\x63\x17\xb2\x7d\x1c\x3f\xc3\x05\x67\xb8\x70\x31\x9c\x23\xdc\x3f\xcc\xef\x31\x1f\x2c\x47\x15\x10\x4e\x96\xd4\x0c\x86\x25\xcd\xe6\x98\xc7\x5a\xe5\x84\x9b\x4b\x83\x4b\xa5\x0d\x56\x92\x7d\x75\x1d\x04\x65\x6b\x84\xfc\xca\xfa\x96\x6e\x87\xf8\x91\xff\x5c\xd2\x75\x84\x8d\x37\x8a\x10\xe4\x98\x97\x84\x9c\x6f\xba\x0e\xd0\xb2\xdc\xbf\x03\x00\x00\xff\xff\x06\xab\xaa\x6d\xf5\x03\x00\x00")

func templateClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateClientTmpl,
		"template/client.tmpl",
	)
}

func templateClientTmpl() (*asset, error) {
	bytes, err := templateClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/client.tmpl", size: 1013, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateRequestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x4f\xeb\x38\x10\x7d\xb6\x7f\xc5\x6c\x04\x28\x45\xc1\x8b\xf6\xb1\x52\x57\x62\xcb\x02\x2b\xed\x02\x4b\xe1\xbe\x20\xa4\xba\xc9\xa4\xf5\x95\xeb\xa4\xb6\x03\xb7\xb2\xfc\xdf\xaf\xc6\x09\xdc\xf2\xf1\x00\x6f\x1e\xcf\x9c\x99\x39\x67\xc6\x7e\x94\x16\x42\x00\x71\x29\xd7\x08\x31\xc2\x04\xe6\x64\xfe\xdf\xa1\xdd\x42\x8c\x73\xce\x43\x00\x2b\xcd\x12\x41\x5c\xcb\xad\x6e\x64\x25\x66\xde\x76\xa5\x77\x10\x23\x67\x21\x78\x5c\xb7\x5a\x7a\x84\xcc\xa5\xfb\x0c\x04\x79\x42\x00\x34\x15\x9d\xb8\xdf\xb6\x08\x16\x5d\xdb\x18\x87\xbb\xc5\x7a\x00\x04\xce\x4e\xa5\x97\x70\xb8\xe3\x1b\x6a\xc1\xfc\xbb\x6b\xcc\x38\xab\xa4\x97\xd9\x9c\xb3\xbf\xad\x6d\xac\x83\xfb\x87\xe5\x46\x23\x9d\x45\xba\x79\x0e\x4b\x57\x2e\x9b\xf3\xc8\x79\xdd\x99\x12\xf2\x12\x0e\xa7\x5a\xa1\xf1\xa3\x5d\x9a\x39\x07\x00\x08\xe1\x08\x54\x0d\xe2\x42\xba\x7f\x4c\xdb\xf9\x18\x43\xe8\xa9\xee\x29\x53\xe1\x8f\x02\xf6\x50\xe3\x1a\x8d\x87\xf1\x04\xc4\x89\x5d\x76\x64\x38\x8a\xfb\x45\x82\xce\x67\x0a\x75\x25\xce\x9b\x5b\x62\x1a\x63\x11\x02\x9a\x2a\x85\x91\x06\x47\x24\x54\xd3\x7a\x07\x87\x37\xb8\xe9\xd0\xf9\xab\xd6\xbb\x11\xe4\x1f\x10\x2e\x20\x71\x18\x41\x00\xa0\x26\x99\xed\x11\x7f\x35\xd5\x36\xf9\xa8\x15\x22\x2b\xfe\x93\xd6\xad\xa4\xce\x87\x80\xc0\x19\x4b\x53\x1b\xef\x12\x2d\x38\x63\x6f\x69\x52\xd3\x9c\xb1\x6f\xd2\x2a\xb9\xd0\xe8\xc6\xb0\x96\xed\xbd\xf3\x56\x99\xe5\x83\x32\x1e\x6d\x2d\x4b\x0c\x91\x32\x26\xf0\xe7\x34\xa1\xe8\x6c\xa7\x74\xf6\xae\x91\x94\x6c\x58\x0a\xc6\x62\x91\x86\xf0\xea\x32\x8e\x38\x67\xaa\x4e\x3c\x7f\x9b\x80\x51\x9a\x96\x83\x59\xf4\x9d\x35\x64\x26\x09\x38\x8b\x9c\x93\x30\x2f\x82\xac\xbc\x6f\xc5\x25\x3e\x0d\xf2\xe6\xd9\xf5\xd5\xec\x36\x2b\xa0\x14\x77\x37\xff\x16\xb0\xd8\x7a\x74\xbd\x5f\x56\x68\xf3\x1d\x4d\x47\x9f\xad\x08\x00\x7d\x64\x1a\xe4\xab\xd0\x8d\xb8\x48\x79\x61\x92\x9c\x83\xf5\xd2\xe5\x60\x8b\x19\xfa\x3c\x9b\x36\xc6\xa3\xf1\x47\xb4\x29\x59\x01\x99\x6c\x5b\xad\x4a\xe9\x55\x63\x7e\xa7\xb1\x66\xa3\x04\x72\xed\x0b\xb7\x52\x9c\x36\xd4\xf1\xa7\x1b\xe5\x9c\x55\x58\xa3\x4d\x4f\x4e\x10\x49\x31\xd5\x8d\xc3\x9c\x32\x2c\x76\xf7\x48\x35\x9d\x57\x5a\x90\x2a\x27\x9a\x36\x69\x88\xff\xc2\x14\x54\xdd\x97\x99\x79\xe9\x3b\x37\x6d\x2a\x24\xc8\x1f\xc7\xc7\xef\x20\xf5\xda\xf7\x8f\xb5\xce\xb3\x61\x4e\x70\x26\x95\xc6\x0a\x9e\x94\x5f\x81\x4b\x19\xa0\x6c\x2a\x1c\xc3\x7e\x55\x00\xb5\x3a\x86\xfd\xc7\xac\x78\x5b\xa2\x80\x7e\x5b\xf3\x45\x3f\xc1\xd4\x09\xfd\x64\xed\xf0\x6b\x7c\xf0\xd9\x70\x46\x74\x86\xb7\x73\x67\xd6\xc3\xeb\xe9\xf5\x38\x18\x80\x5f\x23\xae\xd1\xe4\x03\xb0\x67\xe6\x46\xf0\x27\xbc\x67\x7e\x70\x6e\x65\xbb\xda\xe8\x14\x13\xfa\xc8\x31\xbc\x46\xc6\xe7\x75\x49\xb0\x67\x1f\x7d\x8b\x05\x25\xe1\x91\xff\x0c\x00\x00\xff\xff\xea\xeb\xca\x12\xaa\x05\x00\x00")

func templateRequestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateRequestTmpl,
		"template/request.tmpl",
	)
}

func templateRequestTmpl() (*asset, error) {
	bytes, err := templateRequestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/request.tmpl", size: 1450, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x41\x4f\xe3\x30\x10\x85\xef\xf9\x15\x6f\x7b\x58\x35\xab\xdd\xf4\xbe\x52\x4f\xab\x2d\x88\x43\x39\x50\xc4\x01\xa1\x6a\x70\xc6\xad\x91\xeb\x54\x63\x07\xa8\xac\xfc\x77\x64\x37\x8e\x8a\x10\x39\x4d\xf2\xbe\x79\x99\x79\x13\x23\x5a\xd6\xc6\x31\x66\x3e\x48\xaf\xc2\x0c\xc3\x50\x55\xe1\x74\x64\xc4\x88\x66\x4d\x07\xc6\x30\xe0\x2c\x22\x56\x31\xfe\x81\x90\xdb\x31\x9a\x95\x61\xdb\xfa\xc4\x03\xf8\x44\xa7\xfa\xaa\xdb\x24\x93\xf1\x6d\x43\xbb\x04\xa6\x6e\x76\x6d\x2a\x87\xaa\x8a\x11\x46\xa3\xb9\x26\xbf\x12\xda\x1d\xd8\x85\xec\xa6\x7b\xa7\x30\xd7\xf8\x75\x61\x59\xe3\xde\x1d\x48\xfc\x9e\xec\xcd\xdd\xed\x7a\xde\x52\x20\x3c\x3e\x3d\x9f\x02\xd7\x60\x91\x4e\x10\xf3\x18\xaf\x24\x48\xd3\xbb\xd4\x57\x8a\xac\xb0\x08\xfe\x2e\xf1\xe2\x3b\xd7\x4c\x66\xd9\xe8\x37\x7e\x16\xb2\xae\x32\x6b\x74\xc6\x7f\x2c\xe1\x8c\x1d\x9d\xd3\x23\x1c\x7a\x71\x49\xcb\x9f\x86\x33\xbd\x58\xe0\xff\x7b\x10\x52\x01\xb6\x53\x64\x31\x26\x63\x34\xc8\x9d\x0a\xf2\x8f\x7a\xcf\x1e\xca\x88\xea\x2d\x09\x6c\xd7\x1d\x8b\xf6\x60\xac\x85\x63\x6e\xe1\x59\x75\xae\x1d\xf3\x2e\x72\x9a\xe5\xbb\xc9\x75\x3d\x0d\xa1\x9b\xed\x76\xda\x7d\x39\x6d\xdf\x6c\x4a\x0c\x19\xf4\x6f\x26\xa8\xfd\xfc\x8b\x5a\x5f\xec\x99\x92\x2f\x37\x99\xfe\xc8\x32\x9e\x7a\x5c\x7b\x0c\xc3\x19\x5b\xa5\xcb\x96\xc3\x4e\xd5\x47\x00\x00\x00\xff\xff\x22\x83\x52\x60\x5c\x02\x00\x00")

func templateStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateStructTmpl,
		"template/struct.tmpl",
	)
}

func templateStructTmpl() (*asset, error) {
	bytes, err := templateStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/struct.tmpl", size: 604, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/client.tmpl":  templateClientTmpl,
	"template/request.tmpl": templateRequestTmpl,
	"template/struct.tmpl":  templateStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"client.tmpl":  &bintree{templateClientTmpl, map[string]*bintree{}},
		"request.tmpl": &bintree{templateRequestTmpl, map[string]*bintree{}},
		"struct.tmpl":  &bintree{templateStructTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
